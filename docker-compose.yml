version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: avtomatiz_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-avtomatiz}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - avtomatiz_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_DATABASE:-avtomatiz}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Laravel Backend API
  backend:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: avtomatiz_backend
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini:ro
    environment:
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE:-avtomatiz}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - avtomatiz_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: avtomatiz_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://nginx:80/api
      - NEXT_PUBLIC_APP_URL=http://localhost:80
    depends_on:
      - backend
    networks:
      - avtomatiz_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: avtomatiz_nginx
    restart: unless-stopped
    ports:
      - "${APP_PORT:-80}:80"
      - "${APP_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./storage/logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - avtomatiz_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: avtomatiz_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - avtomatiz_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Supervisor for Queue Workers (optional)
  supervisor:
    build:
      context: ./docker/supervisor
      dockerfile: Dockerfile
    container_name: avtomatiz_supervisor
    restart: unless-stopped
    volumes:
      - .:/var/www/html
      - ./docker/supervisor/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf:ro
    depends_on:
      - postgres
      - redis
    networks:
      - avtomatiz_network

# Development override
  # Development services (uncomment for development)
  # frontend-dev:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: avtomatiz_frontend_dev
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     - NODE_ENV=development
  #     - NEXT_PUBLIC_API_URL=http://localhost:8000/api
  #   networks:
  #     - avtomatiz_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  avtomatiz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 